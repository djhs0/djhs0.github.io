(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{269:function(t,a,r){"use strict";r.r(a);var e=r(0),s=Object(e.a)({},function(){var t=this,a=t.$createElement,r=t._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h2",{attrs:{id:"绞尽脑子也设计不出的通用性"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#绞尽脑子也设计不出的通用性","aria-hidden":"true"}},[t._v("#")]),t._v(" 绞尽脑子也设计不出的通用性")]),t._v(" "),r("p",[t._v("最近在设计一个CI小程序的时候，需要实现持续集成的特性，虽然当前只需要满足gitlab平台即可，但是考虑到想把它推荐给其他人用，所以在实现时尽可能的提高通用性。"),r("br"),t._v("\n实现过程中，接口的设计很难，通用的接口尤其难，有时自己设计的接口自己使用都感觉麻烦，完全不能符合SOLID原则。")]),t._v(" "),r("h2",{attrs:{id:"设计混乱的原因"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#设计混乱的原因","aria-hidden":"true"}},[t._v("#")]),t._v(" 设计混乱的原因")]),t._v(" "),r("p",[t._v("在大学中，没有意识到编程架构的重要性，一直在算法和数据结构中打转，所做的工作大部分也都是刷OJ，即使软件工程中学习到的例如高内聚低耦合等各种名词，对其理解也都在之乎者也的浅显阶段。转到真正工作后，自己所作的工作并没有一个架构师来帮你制定软件架构，给你的只有需求，所有软件实现全凭自己斟酌实现，为什么说时斟酌呢？因为对于没有经验的我来说，选择使用的技术和确定方案实在时太纠结了，剔除一点点主观感受之后，回过头来看，当时选择技术全凭赌，设计软件结构全是顺着需求来，怎么方便怎么来。"),r("br"),t._v("\n体验过软件爆炸之后，一直寻找软件设计的法门。发现对语言不熟悉，认为语言不熟悉导致自己对实现方法的局限，所以主要研究语言特性。又发现设计模式是几十年来软件设计的精华，又去研究设计模式。但是最近发现源码的阅读可能是将上述两个能力一起发展的方法。")])])},[],!1,null,null,null);a.default=s.exports}}]);