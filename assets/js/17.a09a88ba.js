(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{271:function(t,a,s){"use strict";s.r(a);var r=s(0),e=Object(r.a)({},function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"python的不可变对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#python的不可变对象","aria-hidden":"true"}},[t._v("#")]),t._v(" python的不可变对象")]),t._v(" "),s("p",[t._v("int,string,float,tuple在python中都是不可变对象。")]),t._v(" "),s("h2",{attrs:{id:"id函数的定义"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#id函数的定义","aria-hidden":"true"}},[t._v("#")]),t._v(" id函数的定义")]),t._v(" "),s("blockquote",[s("p",[t._v("Return the “identity” of an object. This is an integer (or long integer) which is guaranteed to be unique and constant for this object during its lifetime. Two objects with non-overlapping lifetimes may have the same id()value.")])]),t._v(" "),s("p",[t._v("在不重叠的生命周期内，两个对象可能有同样的id值。\n所以在使用时，每个对象都有一个独一无二的值。")]),t._v(" "),s("h2",{attrs:{id:"小整数池"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#小整数池","aria-hidden":"true"}},[t._v("#")]),t._v(" 小整数池")]),t._v(" "),s("p",[t._v("python为了避免经常使用的小整数不断的在内存中被创建，所以在解释器已启动的时候就将[-5,256]的数字都创建了，所以它们的id是不变的。")]),t._v(" "),s("h2",{attrs:{id:"字符串"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#字符串","aria-hidden":"true"}},[t._v("#")]),t._v(" 字符串")]),t._v(" "),s("p",[t._v("字符串也有缓存区，分为固定缓存区和可重复缓存区"),s("br"),t._v("\n固定的是256个ASCII码字符")]),t._v(" "),s("h2",{attrs:{id:"缓存区"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#缓存区","aria-hidden":"true"}},[t._v("#")]),t._v(" 缓存区")]),t._v(" "),s("p",[t._v("dict和list也有缓存区，大小为80个对象。")]),t._v(" "),s("h2",{attrs:{id:"内存分为3个区域"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#内存分为3个区域","aria-hidden":"true"}},[t._v("#")]),t._v(" 内存分为3个区域")]),t._v(" "),s("p",[t._v("事先分配的静态内存，事先分配的可重复利用的内存以及需要通过malloc和free来控制的自由内存。")]),t._v(" "),s("h1",{attrs:{id:"python的内存管理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#python的内存管理","aria-hidden":"true"}},[t._v("#")]),t._v(" python的内存管理")]),t._v(" "),s("h2",{attrs:{id:"内存管理的方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#内存管理的方法","aria-hidden":"true"}},[t._v("#")]),t._v(" 内存管理的方法")]),t._v(" "),s("ol",[s("li",[t._v("引用计数")]),t._v(" "),s("li",[t._v("垃圾回收\n引用计数决定了当前的对象是否需要被释放，垃圾回收解决了循环引用的问题，同时也对外提供了手动释放内存的接口。")])]),t._v(" "),s("h2",{attrs:{id:"引用计数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#引用计数","aria-hidden":"true"}},[t._v("#")]),t._v(" 引用计数")]),t._v(" "),s("p",[t._v("python使用引用计数来标明某块内存是否还在被使用，每个对象都有一个引用计数器count，记录着这个变量被引用了多少次，当一个对象的引用计数为0的时候，如果这个对象在缓存区里，那么它的地址空间不会被释放，而是等待下一个的使用，如果在非缓存区，则会被释放。"),s("br"),t._v("\n可以使用sys.getrefcount()来查看一个对象的引用计数")]),t._v(" "),s("div",{staticClass:"language-python line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" sys\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" sys"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("getrefcount"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" sys"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("getrefcount"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" \n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br")])]),s("h2",{attrs:{id:"垃圾回收"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#垃圾回收","aria-hidden":"true"}},[t._v("#")]),t._v(" 垃圾回收")]),t._v(" "),s("p",[t._v("垃圾回收解决了循环引用的问题"),s("br"),t._v("\n在python对象的生命周期中，即使python对象的引用为0，python的垃圾回收也不会立刻将它从内存中清除，而是等到引用为0的对象到达一定规模了的时候才会回收一次垃圾。"),s("br"),t._v("\nGC模块回收方法：")]),t._v(" "),s("ol",[s("li",[t._v("将对象分为3代，0代，1代，2代。")]),t._v(" "),s("li",[t._v("当0代对象的引用为0的个数为700时，则启动一次0代对象垃圾回收。")]),t._v(" "),s("li",[t._v("当0代对象垃圾回收执行10次之后，就进行一次0代和1代垃圾回收。")]),t._v(" "),s("li",[t._v("当1代垃圾会后执行10次之后，就进行一次0代，1代，2代的垃圾回收。\n对象代数计算：初始时，所有对象都是0代，0代对象经过一次垃圾回收，没有被释放的对象归为1代，同理，2代是1代对象经过一次次垃圾回收没有被回收的对象。")])]),t._v(" "),s("p",[t._v("分代：典型的空间换时间")]),t._v(" "),s("h2",{attrs:{id:"引入分代回收解决的问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#引入分代回收解决的问题","aria-hidden":"true"}},[t._v("#")]),t._v(" 引入分代回收解决的问题")]),t._v(" "),s("p",[t._v("经过统计，在垃圾回收过程中，如果对象一开始没有被回收，那么这个对象就可能存在很久。")]),t._v(" "),s("h2",{attrs:{id:"循环引用的解决"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#循环引用的解决","aria-hidden":"true"}},[t._v("#")]),t._v(" 循环引用的解决")]),t._v(" "),s("p",[t._v("循环引用只能由容器创建，所以python的垃圾回收不需要跟踪整数，字符串等类型。")]),t._v(" "),s("p",[t._v("垃圾回收使用了标记-清除算法：基于追踪回收。"),s("br"),t._v("\n标记-清除算法是作为python的辅助垃圾回收方法，主要用于处理一些容器对象。缺点：回收之前要扫描整个堆内存。"),s("br"),t._v("\n分代回收是建立于标记-清除机制之上的。")])])},[],!1,null,null,null);a.default=e.exports}}]);